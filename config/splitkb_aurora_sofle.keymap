/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip {
    chain-length = <6>;

    // chain-length = <35>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <29>; // Uncomment if using only per-key LEDs.
};

/ {
    behaviors {
        kp2mo: kp2mo {
            compatible = "zmk,behavior-hold-tap";
            label = "KP2MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            retro-tap;
        };

        enhe_doubleclick: enhe_doubleclick {
            compatible = "zmk,behavior-tap-dance";
            label = "ENHE_DOUBLECLICK";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp N>, <&kp RA(N)>;
        };

        braces_left: braces_left {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACES_LEFT";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_BRACE>,
                <&kp LEFT_PARENTHESIS>,
                <&kp LEFT_BRACKET>;
        };

        braces_right: braces_right {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACES_RIGHT";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_BRACE>,
                <&kp RIGHT_PARENTHESIS>,
                <&kp RIGHT_BRACKET>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter2 {
            bindings = <&kp ENTER>;
            key-positions = <57 53>;
        };

        capsMo {
            bindings = <&caps_word>;
            key-positions = <52 36>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC     &kp N1  &kp N2        &kp N3     &kp N4            &kp N5                                        &kp N6             &kp N7     &kp N8     &kp N9    &kp N0    &kp EQUAL
&kp TAB     &kp Q   &kp W         &kp E      &kp R             &kp T                                         &kp Y              &kp U      &kp I      &kp O     &kp P     &kp BACKSPACE
&kp MINUS   &kp A   &kp S         &kp D      &kp F             &kp G                                         &kp H              &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHIFT  &kp Z   &kp X         &kp C      &kp V             &kp B           &kp C_MUTE    &bt BT_CLR_ALL  &kp N              &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp ENTER
                    &kp LEFT_ALT  &kp LMETA  &kp LEFT_CONTROL  &kp2mo 2 SPACE  &to 1         &to 2           &kp RIGHT_CONTROL  &kp SPACE  &kp RMETA  &kp RALT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOL_UP>,
                <&inc_dec_kp LS(TAB) TAB>;
        };

        number {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp F1         &kp F2           &kp F3       &kp F4     &kp F5      &kp F6                                      &kp F7     &kp F8         &kp F9        &kp F10               &kp F11                &kp F12
&kp MINUS      &kp EXCLAMATION  &kp AT_SIGN  &kp POUND  &kp DOLLAR  &kp PERCENT                                 &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp KP_PLUS
&kp BACKSLASH  &kp N1           &kp N2       &kp N3     &kp N4      &kp N5                                      &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &kp GRAVE
&kp BACKSPACE  &trans           &trans       &trans     &trans      &trans       &caps_word    &rgb_ug RGB_TOG  &trans     &trans         &trans        &trans                &trans                 &trans
                                &trans       &trans     &trans      &trans       &to 0         &to 2            &trans     &trans         &trans        &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_REWIND C_FAST_FORWARD>,
                <&inc_dec_kp LC(Z) LC(Z)>;
        };

        control {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                           &trans            &trans    &trans    &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                           &trans            &trans    &kp UP    &trans     &trans  &kp LC(BACKSPACE)
&trans  &trans  &trans  &trans  &trans  &braces_left                     &braces_right     &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp LESS_THAN  &trans    &trans  &kp GREATER_THAN  &trans    &trans    &trans     &trans  &trans
                &trans  &trans  &trans  &trans         &to 1     &to 0   &trans            &trans    &trans    &trans
            >;
        };
    };
};
